using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LearningCurve : MonoBehaviour
{
    #region Variable
    
    // 1. 변수
    // -개념적으로 변수는 물질계의 원자 처럼 프로그래밍의 가장 기본적인 단위다.
    // 모든 것은 변수에서 시작하며, 변수 없이는 프로그램이 존재할 수 없다.
    // -기술적으로 변수는 할당된 값을 보유하는 컴퓨터 메모리의 작은 부분이다. 모든 변수는 정보가
    // 저장된 위치 (메모리 주소), 값, 타입(인스턴스, 숫자, 단어, 리스트 등)을 추적한다.
    // -실제로 변수는 컨테이너다. 마음대로 변수를 새로 만들고, 채우고, 이동하고, 값을 변경하고
    // 필요에 따라 참조할 수 있다. 심지어 변수는 비어 잇어도 여전히 유용하다.
    // 변수의 범위
    // 클래스 내부에 선언된 변수의경우 해당 클래스 에서 모두 사용가능하며, 메서드 내부에 선언된 변수의 경우 해당 메서드에서만 사용가능하다
    
    #endregion

    #region Method

    // 2. 메서드
    // -개념적으로 애플리케이션에서 작업을 수행하는 방법을 메서드라 한다.
    // -기숙적으로 메서드의 이름이 호출되면 실행 가능한 구문이 작동하는데, 이구문이 포함된 코드 블록을 메서드라 한다.
    // 메서드는 메서드 범위 내부에서 사용할 수 있는 인수(매개변수)를 받을 수 있다.
    // -실제로 메서드는 작동할 때마다 실행되는 명령 집합의 컨테이너다. 또한 이러한 컨테이너는 변수를 입력받을 수 있으며, 메서드 자체 안에서만 참조된다

    #endregion

    #region Class

    // 3. 클래스
    // - 개념적으로 클래스는 단일 컨테이너 안에 관련정보, 작업, 동작을 담고 있다. 심지어 이들은 서로 통신도 할 수 있다.
    // - 기술적으로 클래스는 데이터 구조다. 클래스는 필드, 메서드와 기타 프로그래밍 정보를 포함할 수 있으며
    // 클래스의 객체가 생성되면 모두 참조할 수 있다.
    // - 실제로 클래스는 청사진과 같다. 생성된 모든 객체(인스턴스라고 한다) 에 대한 규칙과 규정은 클래스 청사진을 사용해 설정한다.

    #endregion

    #region Start & Update Method

    // Start 함수는 Monobehaviour 이 지원하며 유니티 실행시 시작
    // Update 함수는 기기별로 속도는 다르지만 매 프레임 실행

    #endregion
}
